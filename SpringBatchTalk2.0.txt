The story
=================================================
- About myself
- Rules for my talks
- We're going to cover three things tonight
- Overview of Spring Batch
- Scaling Spring Batch in the cloud	
- Future of Spring Batch
- Who has used Spring Batch before?
- Overview of Spring Batch
- What is batch processing
- Example use cases
- Spring Batch Jargon
- Job
- Step
- Item
- Chunk 
- Processing examples
- Features of Spring Batch
	- Declarative I/O
	- Robust error handling
	- Parallelization options
	- Administration framework
	- Based on the Spring Container

- Scaling Spring Batch
- Spring Batch provides 4 scaling options
	- Parallel step execution (split) - Single JVM
	- Multithreaded steps - Single JVM
	- Remote chunking
	- Remote partitioning
- Remote Chunking sends the individual data to the remote nodes
	- Useful for processing intensive tasks
	- Not bad if I/O is the bottle neck
- Remote Partitioning describes the work for each node to do
	- Each node is responsible for all three phases of the step (input, process and output)
- We're going to use remote partitioning for our vuln scanner
- Where to deploy it to?
- The cloud offers cheap processing on demand.
- Various cloud options?
	- Amazon EC2
	- Google App Engine
	- Microsoft Azure
	- These take too much work
- What about PaaS options?
	- Heroku
	- AppFog
	- Amazon Elastic Beanstalk
- Why lock into one at all?
- Cloud foundry allows you to deploy to any cloud you want
- It's an open source platform for managing cloud infrastructures that can be deployed on any cloud...including your own
- We use the tool VMC to manage our deployments via CloudFoundry
- Demo

- The Future of Batch
- JSR-352
	- Spring Batch will implement JSR-352.
	- However the JSR is only the tip of the ice berg.
	- Things it does cover:
		- Job structure (Jobs, steps, flows, splits, etc)
		- Item reader/writer/processor, etc APIs
	- Things the JSR does not cover:
		- Scaling options outside of a single JVM
		- A true job repository
		- Item reader/writer/processor, etc implementations.
- Improving scalability options
- Improving ease of use
- One more thing...Contribute
